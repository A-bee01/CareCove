{"version":3,"file":"dashboard-CpjemsM2.js","sources":["../../../../components/Balances.vue","../../../../components/Credentials.vue","../../../../components/TransactionModal.vue","../../../../components/Transactions.vue"],"sourcesContent":["<template>\n  <div class=\"bg-white dark:bg-[#10673b] rounded-lg shadow p-6\">\n    <div class=\"flex justify-between items-center\">\n      <h2 class=\"text-2xl font-bold\">Balance</h2>\n    </div>\n    <div class=\"text-4xl font-bold my-4\">TB$ {{ balance }}</div>\n  </div>\n  <div class=\"bg-[#10673b] rounded-lg p-6\">\n    <h2 class=\"text-xl font-semibold mb-4\">Donate</h2>\n    <form @submit.prevent=\"submitDonation\" class=\"space-y-4\">\n      <div>\n        <label for=\"cause\" class=\"block text-sm font-medium mb-1\"\n          >Cause</label\n        >\n        <select\n          v-model=\"selectedCause\"\n          id=\"cause\"\n          class=\"w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 text-green-700\"\n          required\n        >\n          <option value=\"\">Select a cause</option>\n          <option v-for=\"cause in causes\" :key=\"cause\" :value=\"cause\">\n            {{ cause }}\n          </option>\n        </select>\n      </div>\n      <nuxt-link\n        to=\"/donate\"\n        class=\"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-full\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"w-5 h-5 mr-2\"\n        >\n          <path d=\"m22 2-7 20-4-9-9-4Z\"></path>\n          <path d=\"M22 2 11 13\"></path>\n        </svg>\n        Donate\n      </nuxt-link>\n    </form>\n  </div>\n</template>\n\n<script setup>\nimport { useStore } from \"~/data_providers/data\";\nconst selectedCause = ref(\"\");\n\nconst causes = [\n  \"Environmental Conservation\",\n  \"Education for All\",\n  \"Healthcare Access\",\n  \"Animal Welfare\",\n  \"Hunger Relief\",\n];\nconst { state } = useStore();\nconst balance = computed(() => state.balance);\n\n</script>\n","<template>\n  <div class=\"bg-white dark:bg-[#10673b] rounded-lg shadow p-6\">\n    <h2 class=\"text-2xl font-bold mb-4\">Credentials</h2>\n    <div v-if=\"parsedCredentials.length\">\n      <div v-for=\"credential, index in parsedCredentials\" :key=\"index\" class=\"mb-4 p-4 border rounded-lg lg:w-1/2 w-full\">\n        <p><strong>{{ credential.title }} </strong></p>\n        <p><strong>Name:</strong> {{ credential.name }}</p>\n        <p><strong>Country Code:</strong> {{ credential.countryCode }}</p>\n        <p><strong>Date:</strong> {{ credential.issuanceDate }}</p>\n      </div>\n    </div>\n    <div v-else>\n      <p>No credentials found.</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useStore } from '~/data_providers/data';\n\nconst { state, renderCredential } = useStore();\n\nconst parsedCredentials = computed(() =>\n  state.customerCredentials.map(jwt => renderCredential(jwt))\n);\n</script>\n","<template>\n  <div class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\" @click=\"closeOnOutsideClick\">\n    <div class=\"bg-white dark:bg-[#10673b] rounded-lg shadow p-6 w-full max-w-md\" @click.stop>\n      <div class=\"grid gap-6\">\n        <div class=\"flex items-center gap-4\">\n          <div>\n            <svg\n              v-if=\"transaction.status === 'completed'\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"green\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              class=\"h-5 w-5\"\n            >\n              <path d=\"M20 6 9 17l-5-5\"></path>\n            </svg>\n            <svg\n              v-else-if=\"transaction.status === 'failed' || transaction.status === 'cancelled'\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"red\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              class=\"h-5 w-5\"\n            >\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\n              <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\n            </svg>\n            <svg\n              v-else\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              class=\"h-5 w-5\"\n            >\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              <path d=\"M12 6v6l4 2\"></path>\n            </svg>\n          </div>\n          <div class=\"flex-1\">\n            <p class=\"text-sm font-medium\">{{ state.pfiAllowlist.find(pfi => pfi.pfiUri === transaction.pfiDid).pfiName }}</p>\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">Exchange from {{transaction.payinCurrency}} to {{transaction.payoutCurrency}}</p>\n          </div>\n          <div class=\"flex-1\">\n            <p class=\"text-XL font-medium text-right\">{{ transaction.payinAmount }} {{ transaction.payinCurrency }}</p>\n\n          </div>\n        </div>\n        <div class=\"grid gap-2\">\n          <label class=\"text-sm font-medium leading-none\">Sender</label>\n          <div class=\"flex\">\n            <span class=\"flex-1 rounded-md bg-gray-100 px-3 py-2 text-sm text-gray-900 dark:bg-gray-800 dark:text-gray-100\">\n              You\n            </span>\n          </div>\n        </div>\n        <div class=\"grid gap-2\">\n          <label class=\"text-sm font-medium leading-none\">Recipient Details</label>\n          <div class=\"flex\">\n            <span class=\"flex-1 rounded-md bg-gray-100 px-3 py-2 text-sm text-gray-900 dark:bg-gray-800 dark:text-gray-100\">\n              {{ transaction.to }}\n            </span>\n          </div>\n        </div>\n        <div class=\"grid gap-2\">\n          <label class=\"text-sm font-medium leading-none\">Amount</label>\n          <div class=\"flex\">\n            <span class=\"flex-1 rounded-md bg-gray-100 px-3 py-2 text-sm text-gray-900 dark:bg-gray-800 dark:text-gray-100\">\n              {{ transaction.payoutAmount }} {{ transaction.payoutCurrency }}\n            </span>\n          </div>\n        </div>\n        <div v-if=\"transaction.status === 'quote' && transaction.expirationTime\" class=\"grid gap-2\">\n          <label class=\"text-sm font-medium leading-none\">Expires</label>\n          <div class=\"flex\">\n            <span class=\"flex-1 rounded-md bg-gray-100 px-3 py-2 text-sm text-gray-900 dark:bg-gray-800 dark:text-gray-100\">\n              {{ new Date(transaction.expirationTime).toLocaleDateString(undefined, {dateStyle: 'medium'}) }}\n            </span>\n          </div>\n        </div>\n        <div v-if=\"transaction.status === 'quote' && !loading\" class=\"flex justify-end gap-2\">\n          <button @click=\"reject\" class=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-red-500 hover:text-white h-10 px-4 py-2\">\n            Cancel\n          </button>\n          <button @click=\"pay\" class=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-blue-500 text-white hover:bg-blue-700 h-10 px-4 py-2\">\n            Pay {{ transaction.payinAmount }} {{ transaction.payinCurrency }}\n          </button>\n        </div>\n        <div v-if=\"loading\">\n          <Spinner />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue';\nimport { useStore } from '~/data_providers/data.js';\nimport Spinner from '~/components/Spinner.vue'\n\n\nconst { state, addOrder, addClose, deductAmount } = useStore();\nconst loading = ref(false);\n\nconst props = defineProps({\n  transaction: {\n    type: Object,\n    required: true\n  }\n});\n\nconst emit = defineEmits(['close']);\n\nconst closeOnOutsideClick = () => {\n  emit('close');\n};\n\nconst reject = async () => {\n  // Handle rejection logic\n  loading.value = true;\n  await addClose(props.transaction.id, props.transaction.pfiDid, 'user cancelled')\n  loading.value = false;\n  emit('close');\n};\n\nconst pay = async () => {\n  // Handle payment logic\n  loading.value = true;\n  await addOrder(props.transaction.id, props.transaction.pfiDid)\n //if(props.transaction.payinCurrency === 'TB$' && props.transaction.payoutCurrency === 'USDC') {\n  await deductAmount(props.transaction.payinAmount)\n    \n // }\n  loading.value = false;\n  window.location.reload();\n  emit('close');\n};\n</script>\n\n<style scoped>\n.bg-primary {\n  background-color: #3b82f6; /* Primary color */\n}\n.text-primary-foreground {\n  color: #ffffff; /* Primary foreground color */\n}\n</style>\n","<template>\n  <div class=\"bg-white dark:bg-[#10673b] rounded-lg shadow p-6\">\n    <h2 class=\"text-2xl font-bold mb-4\">Recent Transactions</h2>\n    <div>\n      <ul v-if=\"transactions.length\">\n        <li\n          v-for=\"transaction in transactions\"\n          :key=\"transaction.id\"\n          @click=\"openTransactionModal(transaction)\"\n          class=\"flex items-center justify-between rounded-lg bg-gray-100 dark:bg-[#39b34d] p-4 transition-colors hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer mb-2\"\n        >\n          <div class=\"flex items-center gap-4\">\n            <div class=\"bg-gray-200 dark:bg-[#10673b] rounded-full p-2\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"w-5 h-5 text-gray-500 dark:text-gray-400\">\n                <path d=\"m22 2-7 20-4-9-9-4Z\"></path>\n                <path d=\"M22 2 11 13\"></path>\n              </svg>\n            </div>\n            <div>\n              <div class=\"font-medium\">{{ getStatusString(transaction) }}</div>\n              <div class=\"text-[gray-500] dark:text-white text-sm\">{{ new Date(transaction.createdTime).toLocaleDateString(undefined, {dateStyle: 'medium'}) }}</div>\n            </div>\n          </div>\n          <div v-if=\"transaction.status === 'quote'\" className=\"w-1/5 flex items-center justify-end\">\n            <!-- <div className=\"h-auto w-auto mt-1.5 p-2 rounded-lg bg-neutral-700 text-white text-xs flex items-center justify-center\">Review</div> -->\n          </div>\n        </li>\n      </ul>\n      <div v-else class=\"text-center text-gray-500\">\n        <Spinner v-if=\"transactionsLoading\" />\n        <p v-else>No transactions available</p>\n      </div>\n    </div>\n    <TransactionModal v-if=\"selectedTransaction\" :transaction=\"selectedTransaction\" @close=\"closeTransactionModal\" />\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useStore } from '~/data_providers/data.js';\nimport Spinner from '~/components/Spinner.vue'\nimport TransactionModal from '~/components/TransactionModal.vue';\n\nconst { state, selectTransaction, pollExchanges } = useStore();\nconst transactions = computed(() => state.transactions);\nconst transactionsLoading = computed(() => state.transactionsLoading);\nconst selectedTransaction = ref(null);\n\nconst openTransactionModal = (transaction) => {\n  selectedTransaction.value = transaction;\n  selectTransaction(transaction);\n};\n\nconst closeTransactionModal = () => {\n  selectedTransaction.value = null;\n  selectTransaction(null);\n};\n\nconst getStatusString = (exchange) => {\n  switch (exchange.status) {\n    case 'rfq':\n      return `Requested ${(exchange.payinAmount)} ${exchange.payinCurrency}`\n    case 'quote':\n      return `Quoted ${(exchange.payinAmount)} ${exchange.payinCurrency}`\n    case 'order':\n      return `Payment for ${(exchange.payinAmount)} ${exchange.payinCurrency} submitted`\n    case 'orderstatus':\n      return `Payment processing for ${(exchange.payinAmount)} ${exchange.payinCurrency}...`\n    case 'completed':\n      return `Sent ${(exchange.payinAmount)} ${exchange.payinCurrency}`\n    case 'expired':\n      return `Quote for ${(exchange.payinAmount)} ${exchange.payinCurrency} expired`\n    case 'cancelled':\n      return `Exchange for ${(exchange.payinAmount)} ${exchange.payinCurrency} was cancelled`\n    case 'failed':\n      return `Payment for ${(exchange.payinAmount)} ${exchange.payinCurrency} failed`\n    default:\n      return exchange.status\n  }\n}\n\nonMounted(() => {\n  console.log('Polling exchanges...');\n  pollExchanges();\n});\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,UAAM,gBAAgB,IAAI,EAAE;AAE5B,UAAM,SAAS;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAM,EAAE,MAAK,IAAK;AAClB,UAAM,UAAU,SAAS,MAAM,MAAM,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3C5C,UAAM,EAAE,OAAO,qBAAqB;AAEpC,UAAM,oBAAoB;AAAA,MAAS,MACjC,MAAM,oBAAoB,IAAI,SAAO,iBAAiB,GAAG,CAAC;AAAA,IAC5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8FA,UAAM,EAAE,OAAO,UAAU,UAAU,aAAA,IAAiB;AAC9C,UAAA,UAAU,IAAI,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EzB,UAAM,EAAE,OAAO,mBAAmB,cAAe,IAAG,SAAQ;AAC5D,UAAM,eAAe,SAAS,MAAM,MAAM,YAAY;AACtD,UAAM,sBAAsB,SAAS,MAAM,MAAM,mBAAmB;AACpE,UAAM,sBAAsB,IAAI,IAAI;AAOpC,UAAM,wBAAwB,MAAM;AAClC,0BAAoB,QAAQ;AAC5B,wBAAkB,IAAI;AAAA,IACxB;AAEA,UAAM,kBAAkB,CAAC,aAAa;AACpC,cAAQ,SAAS,QAAM;AAAA,QACrB,KAAK;AACH,iBAAO,aAAc,SAAS,WAAa,IAAG,SAAS,aAAa;AAAA,QACtE,KAAK;AACH,iBAAO,UAAW,SAAS,WAAa,IAAG,SAAS,aAAa;AAAA,QACnE,KAAK;AACH,iBAAO,eAAgB,SAAS,WAAa,IAAG,SAAS,aAAa;AAAA,QACxE,KAAK;AACH,iBAAO,0BAA2B,SAAS,WAAa,IAAG,SAAS,aAAa;AAAA,QACnF,KAAK;AACH,iBAAO,QAAS,SAAS,WAAa,IAAG,SAAS,aAAa;AAAA,QACjE,KAAK;AACH,iBAAO,aAAc,SAAS,WAAa,IAAG,SAAS,aAAa;AAAA,QACtE,KAAK;AACH,iBAAO,gBAAiB,SAAS,WAAa,IAAG,SAAS,aAAa;AAAA,QACzE,KAAK;AACH,iBAAO,eAAgB,SAAS,WAAa,IAAG,SAAS,aAAa;AAAA,QACxE;AACE,iBAAO,SAAS;AAAA,MACnB;AAAA,IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}